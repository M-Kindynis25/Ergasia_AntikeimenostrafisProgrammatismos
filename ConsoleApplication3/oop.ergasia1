#include <iostream>
#include <vector>

// define a class for each type of game object
class Vampire {
public:
  // constructor to initialize the object's properties
  Vampire(int x, int y) : x_(x), y_(y) {}
  // method to move the object to a new position on the map
  void move(int x, int y) { x_ = x; y_ = y; }
  // method to attack another object
  void attack(GameObject& target) {
    // code to handle attacking the target
  }
  // getters for the object's position
  int x() const { return x_; }
  int y() const { return y_; }

private:
  int x_, y_;
  // other properties, such as health, attack power, etc.
};

class Werewolf {
public:
  // similar methods and properties as Vampire class
  Werewolf(int x, int y) : x_(x), y_(y) {}
  void move(int x, int y) { x_ = x; y_ = y; }
  void attack(GameObject& target) {
    // code to handle attacking the target
  }
  int x() const { return x_; }
  int y() const { return y_; }

private:
  int x_, y_;
  // other properties, such as health, attack power, etc.
};

class Avatar {
public:
  // similar methods as Vampire and Werewolf classes, but no attack method
  Avatar(int x, int y) : x_(x), y_(y) {}
  void move(int x, int y) { x_ = x; y_ = y; }
  int x() const { return x_; }
  int y() const { return y_; }

private:
  int x_, y_;
};

int main() {
  // create the game objects and place them on the map
  std::vector<Vampire> vampires;
  std::vector<Werewolf> werewolves;
  Avatar avatar(0, 0);
  // initialize the map size
  int map_width, map_height;
  std::cin >> map_width >> map_height;

  // main game loop
  while (true) {
    // handle player input to move the avatar
    char input;
    std::cin >> input;
    switch (input) {
      case 'w':
        avatar.move(avatar.x(), avatar.y() - 1);
        break;
      case 'a':
        avatar.move(avatar.x() - 1, avatar.y());
        break;
      case 's':
        avatar.move(avatar.x(), avatar.y() + 1);
        break;
      case 'd':
        avatar.move(avatar.x() + 1, avatar.y());
        break;
      // handle other input as necessary
    }
    // check if the avatar has collided with any vampires or werewolves
    for (Vampire& v : vampires) {
      if (v.x() == avatar.x() && v.y() == avatar.y()) {
        // avatar has collided with a
